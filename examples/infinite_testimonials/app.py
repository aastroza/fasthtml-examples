import fasthtml.common as fh
from pydantic import BaseModel
from modal import App, Image, Cls, asgi_app
from textwrap import dedent

class Testimonial(BaseModel):
    quote: str
    name: str
    role: str
    company: str

    def __ft__(self):
        return fh.Div(
            fh.Blockquote(fh.P(self.quote)),
            fh.H4(self.name),
            fh.P(f"{self.role}, {self.company}"),
        )

Model = Cls.lookup("outlines-app", "Model")
m = Model()

schema = """{
    "title": "Testimonial",
    "type": "object",
    "properties": {
        "quote": {
            "title": "Quote",
            "type": "string"
        },
        "name": {
            "title": "Name",
            "type": "string"
        },
        "role": {
            "title": "Role",
            "description": "The professional role of the individual giving the testimonial.",
            "type": "string"
        },
        "company": {
            "title": "Company",
            "description": "The name of the company where the individual works or which they represent.",
            "type": "string"
        }
    },
    "required": ["quote", "name", "role", "company"]
}
"""

prompt_template = dedent(
                                    """
                                <|system|> You are a world class marketing copywriter. You must write new testimonials for a product by replying VALID JSON that matches the schema below.
                                
                                ```json
                                {schema}
                                ```
                                
                                Be creative and write new testimonials that are unique and engaging.<|end|>
                                <|user|> Write testimonials about the TimeMaster 2049, a time-stopping watch. A small, undistinguishable watch that can stop and start time whenever you want it to. <|end|>
                                <|assistant|>
                                """)

def generate_testimonial_card() -> Testimonial:
    result = m.generate.remote(schema.strip(),  prompt_template.format(schema=schema.strip()))
    return Testimonial(**result)

# FastHTML app setup
fasthtml_app, rt = fh.fast_app(hdrs=(
    fh.Style("""
        .htmx-indicator {
            display: none;
        }
        .htmx-request .htmx-indicator {
            display: block;
        }
    """),
))

@rt("/")
def get():
    return fh.Titled('Infinite Fake Testimonials',
                  fh.Div(
                      fh.Div(id="testimonial-card"),  # The placeholder for the testimonial card
                      fh.Div("This testimonial is fake. The product, person and company do not exist. All were generated by AI.", style='color: red;'),
                      fh.Div(
                          fh.Button("Next", id="next-btn", hx_get="/page", hx_target="#testimonial-card", hx_indicator="#loading"),  # Use HTMX to fetch testimonials
                      ),
                      fh.Div("Loading...", id="loading", cls="htmx-indicator") # Loading indicator
                  ),
                  fh.Script('htmx.trigger("#next-btn", "click")')
                  )

@rt("/page")
def get():
    return generate_testimonial_card()

if __name__ == "__main__":  # if invoked with `python`, run locally
    fh.serve(app="fasthtml_app")
else:  # create a modal app, which can be imported in another file or used with modal commands as in README
    app = App(name="fasthtml-app")
    image = Image.debian_slim().pip_install(
            "python-fasthtml"
        )

    # modal uses decorators to define infrastructure and deployments
    @app.function(  # here's where you can attach GPUs, define concurrency limits, etc.
        image=image,
        allow_concurrent_inputs=1000,  # async functions can handle multiple inputs
    )
    @asgi_app()  # add this decorator to a function that returns your fastHTML app to make it deployable on Modal
    def serve():
        return fasthtml_app